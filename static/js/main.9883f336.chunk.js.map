{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodo","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA8DeA,MA5Df,SAAkBC,GACd,MAAuBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAhE,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAWC,iBAAO,MACxBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAa,SAAAC,GACfP,EAASO,EAAEC,OAAOV,QAIhBW,EAAa,SAAAF,GACfA,EAAEG,iBAEFf,EAAMgB,SAAS,CACZC,GAAGC,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBC,KAAKjB,IAERC,EAAS,KAGb,OACI,8BACG,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SACItB,EAAME,KACD,qCACA,uBACIqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEd,wBAAQK,QAASb,EAAcQ,UAAU,mBAAzC,uBAKA,qCACA,uBACIC,YAAY,aACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAET,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,8B,eCXLM,MApCf,YAA2D,IAA5CC,EAA2C,EAA3CA,MAAMC,EAAqC,EAArCA,aAAaC,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,WACzC,EAAqB/B,mBAAS,CAC1BgB,GAAG,KACHd,MAAM,KAFV,mBAAOD,EAAP,KAAY+B,EAAZ,KAYA,OAAG/B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SARZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAGd,GACnB8B,EAAQ,CACJhB,GAAI,KACJd,MAAM,QAOP0B,EAAMK,KAAI,SAACC,EAAKC,GAAN,OACf,sBAAiBd,UAAWa,EAAKE,WAAa,oBAAsB,WAApE,UACE,qBAAiBV,QAAS,kBAAIG,EAAaK,EAAKlB,KAAhD,SACKkB,EAAKd,MADAe,GAGV,sBAAKd,UAAU,QAAf,UACG,cAAC,IAAD,CACEK,QAAS,kBAAII,EAAWI,EAAKlB,KAC7BK,UAAU,gBAEZ,cAAC,IAAD,CACCK,QAAS,kBAAIM,EAAQ,CAAChB,GAAGkB,EAAKlB,GAAGd,MAAMgC,EAAKhC,SAC5CmB,UAAU,mBAXNc,OCyBDE,MA5Cf,WACI,MAAuBrC,mBAAS,IAAhC,mBAAO4B,EAAP,KAAaU,EAAb,KAkCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUvB,SAnCF,SAAAmB,GACZ,GAAIA,EAAKd,OAAS,QAAQmB,KAAKL,EAAKd,MAApC,CAIA,IAAMoB,EAAQ,CAACN,GAAF,mBAAUN,IACvBa,QAAQC,IAAR,CAAaR,GAAb,mBAAqBN,KACrBU,EAASE,OA6BL,cAAC,EAAD,CAAMZ,MAAOA,EAAOC,aAdT,SAAAb,GACf,IAAI2B,EAAaf,EAAMK,KAAI,SAAAC,GAIvB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASK,IAO2Cb,WAnBrC,SAAAd,GACf,IAAM4B,EAAU,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKlB,KAAOA,KACtDsB,EAASM,IAiBmEb,WA1B/D,SAACe,EAAOC,GACjBA,EAAS3B,OAAQ,QAAQmB,KAAKQ,EAAS3B,OAG3CkB,GAAS,SAAAU,GAAI,OAAEA,EAAKf,KAAI,SAAAgB,GAAI,OAAEA,EAAKjC,KAAO8B,EAASC,EAAWE,eCTvDC,MARf,WACE,OACE,qBAAK7B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9883f336.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input,setInput]=useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect(()=>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange=e=>{\r\n        setInput(e.target.value)\r\n    }\r\n\r\n\r\n    const handleSubmit=e=>{\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n           id:Math.floor(Math.random() * 100000),\r\n           text:input\r\n        });\r\n        setInput('');\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n           <form onSubmit={handleSubmit} className='todo-form'>\r\n              {props.edit ? (\r\n                    <>\r\n                    <input\r\n                        placeholder='Update your item'\r\n                        value={input}\r\n                        onChange={handleChange}\r\n                        name='text'\r\n                        ref={inputRef}\r\n                        className='todo-input edit'\r\n                    />\r\n                    <button onClick={handleSubmit} className='todo-button edit'>\r\n                        Update\r\n                    </button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <input\r\n                        placeholder='Add a todo'\r\n                        value={input}\r\n                        onChange={handleChange}\r\n                        name='text'\r\n                        className='todo-input'\r\n                        ref={inputRef}\r\n                    />\r\n                    <button onClick={handleSubmit} className='todo-button'>\r\n                        Add todo\r\n                    </button>\r\n                    </>\r\n                )}\r\n           </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos,completeTodo,removeTodo,updateTodo}) {\r\n    const [edit,setEdit]=useState({\r\n        id:null,\r\n        value:'',\r\n    })\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id,value)\r\n        setEdit({\r\n            id: null,\r\n            value:''\r\n        })\r\n    }\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>\r\n    }\r\n\r\n    return todos.map((todo,index)=>(\r\n      <div key={index} className={todo.isComplete ? 'todo-row complete' : 'todo-row'}>\r\n        <div key={index} onClick={()=>completeTodo(todo.id)}>\r\n            {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n           <RiCloseCircleLine\r\n             onClick={()=>removeTodo(todo.id) }\r\n             className='delete-icon'\r\n           />\r\n           <TiEdit\r\n            onClick={()=>setEdit({id:todo.id,value:todo.value}) }\r\n            className='edit-icon'\r\n           />\r\n        </div>\r\n      </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React,{useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos]=useState([])\r\n\r\n    const addTodo = todo =>{\r\n        if(!todo.text ||  /^\\s*$/.test(todo.text)){\r\n            return\r\n        }\r\n\r\n        const newTodo=[todo,...todos]\r\n        console.log([todo,...todos]);\r\n        setTodos(newTodo);\r\n    }\r\n\r\n    const updateTodo=(todoId,newValue)=>{\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n        setTodos(prev=>prev.map(item=>item.id === todoId ? newValue : item))\r\n    }\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr=[...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo=id=>{\r\n        let updatedTodos=todos.map(todo=>{\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","\nimport './App.css';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}